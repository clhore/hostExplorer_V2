#!/usr/bin/bash

# Author: Adrian Lujan Mu√±oz ( aka clhore )

# Colours
end="\033[0m\e[0m"
green="\e[0;32m\033[1m"
red="\e[0;31m\033[1m"
blue="\e[0;34m\033[1m"
yellow="\e[0;33m\033[1m"
purple="\e[0;35m\033[1m"
turquoise="\e[0;36m\033[1m"
gray="\e[0;37m\033[1m"

trap ctrl_c INT

function ctrl_c(){
	echo -e "\n${yellowColour}[*]${endColour}${grayColour}Saliendo${endColour}"
	tput cnorm; exit 0
}

function help_panel(){
	echo -e "${yellow}[*] ${end}${gray}USO:${end} ./NETscan -i <ip-addres> --mask <network-mask> [options]"
	echo -e "\n\t${yellow}--system${end}\t-  ${gray}arch [0] | debian [1] | ubuntu [2] ${end}"
	echo -e "\t${yellow}--sys${end}"
	echo -e "\n\t${yellow}--install${end}\t-  ${gray}true  [ install the required packages ]${end}"
	echo -e "\t\t\t   ${gray}false [ skip the installs the necessary packages ]${end}"
	echo -e "\t\t\t   ${gray}(defauld value is false${end})"
	echo -e "\n\t${yellow}--mode  ${end}\t-  ${gray}0  [ host discovery through icmp ]${end}"
        echo -e "\t${yellow}-m      ${end}\t-  ${gray}1  [ host discovery through icmp and dns (mac detection) ]${end}"
        echo -e "\t\t\t   ${gray}(defauld value is 1${end})"
	echo -e ''; exit 0
}

function defauld_value(){
#       variables["--install"]="INSTALL"
	if [ -z "$INSTALL" ]; then INSTALL="false"; fi

#       variables["-m"]="SCAN_MODE"
        if [ -z "$SCAN_MODE" ]; then SCAN_MODE="1"; fi

#       variables["--mask"]="NETWORK_MASK"
	if [ -z "$NETWORK_MASK" ]; then NETWORK_MASK=24; fi

#	if [ "$NETWORK_MASK" != "" ]; then cal
}

function system_user(){
	until [[ $SYSTEM_USER =~ (arch|debian|ubuntu) ]]; do
		echo -ne "${yellow}[*] Sistema operativo [arch/debian/ubuntu]: ${end}" & read SYSTEM_USER

		if [ "$SYSTEM_USER" == "0" ]; then SYSTEM_USER="arch"; fi
		if [ "$SYSTEM_USER" == "1" ]; then SYSTEM_USER="debian"; fi
		if [ "$SYSTEM_USER" == "2" ]; then SYSTEM_USER="ubuntu"; fi
	done
}

function install_tool(){
	PROGRAM_INSTALL=$1; case $SYSTEM_USER in
		"ubuntu")
                        if [ "$PROGRAM_INSTALL" == "nmblookup" ]; then PROGRAM_INSTALL="samba-common-bin"; fi
			apt-get install $PROGRAM_INSTALL &>/dev/null
			if [ $? -ne 0 ]; then echo -e "${red}:: Error install $1${end}"; fi
		;;
		"debian")
			if [ "$PROGRAM_INSTALL" == "nmblookup" ]; then PROGRAM_INSTALL="samba-common-bin"; fi
                        apt-get install $PROGRAM_INSTALL &>/dev/null
                        if [ $? -ne 0 ]; then echo -e "${red}:: Error install $1${end}"; fi
                ;;
		"arch")
			if [ "$PROGRAM_INSTALL" == "nmblookup" ]; then PROGRAM_INSTALL="smbclient"; fi
			pacman --noconfirm $PROGRAM_INSTALL &>/dev/null
			if [ $? -ne 0 ]; then echo -e "${red}:: Error install $1${end}"; fi
		;;
	esac
}

function dependencies(){
	tput civis; system_user
	clear; DEPENDENCIES=(arping xterm nmblookup)

	for PROGRAM in "${DEPENDENCIES[@]}"; do
		test -f /usr/bin/$PROGRAM
                if [ $? -ne 0 ]; then install_tool $PROGRAM; fi
	done
	echo -e "${gray}:: Proceso de instalacion terminado${end}"
}

function python_scan(){
	printf "
#!/bin/python3
from ipaddress import ip_network, IPv4Address, IPv4Interface
from tabulate import tabulate
from icmplib import ping
import threading
import nmap3

global IP_INFO_LIST, DATA_BASE_OUI
IP_INFO_LIST = list()
DATA_BASE_OUI = 'oui_hex.txt'

def client_list(_RED, _MASK):
	IP_LIST = list(
		ip_network(
			'{red}/{mask}'.format(
				red=_RED,
				mask=_MASK
			)
		)
	)

	return IP_LIST

def mask_parsec(_RED, _MASK):
	try:
		return IPv4Interface(
			'{red}/{mask}'.format(
				red=_RED,
				mask=_MASK
				)
			).with_netmask.split('/')[1]

	except:
		return '255.255.255.0'

def icmp_scan(IP: str):
	try:
		HOST = ping(IP, count=1, privileged=False)
		return HOST.is_alive
	except:
		return False

def hostname_scan(IP: str):
	try:
		HOST_INFO = nmap3.NmapScanTechniques().nmap_ping_scan(IP)

		try:
			HOSTNAME = HOST_INFO[IP]['hostname'][0]['name']
		except:
			HOSTNAME = False

		try:
			MACADDRES = HOST_INFO[IP]['macaddress']['addr']
		except:
			MACADDRES = False

		return HOSTNAME, MACADDRES
	except:
		return False, False


class Hilo(threading.Thread):
	def __init__(self, IP_LIST, ICMP=True, TCP=None, HOSTNAME=None):
		threading.Thread.__init__(self)
		self.IP_LIST = IP_LIST
		self.ICMP = ICMP
		self.TCP = TCP
		self.HOSTNAME = HOSTNAME

	def run(self):
		ERR_ICMP = None; ERR_TCP = None; TCP_PORT = None; HOSTNAME = None; MACADDRES = None

		for IP in self.IP_LIST:
			if self.ICMP:
				ERR_ICMP = icmp_scan(str(IP))

			if self.TCP:
				ERR_TCP = False

			if ( ( ERR_ICMP ) or ( ERR_TCP ) ) and ( self.HOSTNAME ):
				HOSTNAME, MACADDRES = hostname_scan(str(IP))

			IP_INFO = {
				'ip': str(IP),
				'hostname': HOSTNAME,
				'macaddres': MACADDRES,
				'icmp': ERR_ICMP,
				'tcp': ERR_TCP,
				'tcp_port': TCP_PORT
			}

			if ( ERR_ICMP ) or ( ERR_TCP ):
				IP_INFO_LIST.append(IP_INFO)
				#print(IP_INFO)

			ERR_ICMP = None; ERR_TCP = None; TCP_PORT = None; HOSTNAME = None; MACADDRES = None

def net_scan(IP_LIST, ICMP=True, HOSTNAME=True, TCP=False):
	NUM_IP = len(IP_LIST)
	THREADS = 3
	NUM_THREADS = int((NUM_IP / THREADS))+1

	#print(NUM_THREADS)
	#print(NUM_IP)
	#print(NUM_IP / NUM_THREADS)

	COUNT=0
	THREAD_LIST = list()
	for i in range(NUM_THREADS):
		_IP_LIST = IP_LIST[COUNT:COUNT+3]
		#print(_IP_LIST)
		THREAD = Hilo(_IP_LIST, ICMP=True, TCP=TCP, HOSTNAME=HOSTNAME)
		THREAD.start()
		THREAD_LIST.append(THREAD)
		COUNT += 3

	for THREAD in THREAD_LIST:
		THREAD.join()

def oui_detection(MACADDRES):
	OUI = MACADDRES[0:8].replace(':', '-')
	with open(DATA_BASE_OUI, 'r') as file:
		while (line := file.readline().rstrip()):
			if OUI in line:
				return line.split('	')[1]
	return False

def create_table(LISTA, SCAN_MODE):
	if SCAN_MODE == 0:
		DATA_FILE = {
                        'ip': [i['ip'] for i in LISTA],
                        'status': ['ONLINE' for i in LISTA]
		}
		TABLE = tabulate(DATA_FILE, headers=['IP', 'STATUS'], showindex=True)

	if SCAN_MODE == 1:
		DATA_FILE = {
			'ip': [i['ip'] for i in LISTA],
			'hostname': [i['hostname'] for i in LISTA],
			'macaddres': [i['macaddres'] for i in LISTA],
			'oui': [oui_detection(i['macaddres']) if i['macaddres'] is not False else i['macaddres'] for i in LISTA],
			'status': ['ONLINE' for i in LISTA]
		}
		TABLE = tabulate(DATA_FILE, headers=['IP', 'HOSTNAME', 'MACADDRES', 'OUI', 'STATUS'], showindex=True)

	if SCAN_MODE == 2:
		DATA_FILE = {
                        'ip': [i['ip'] for i in LISTA],
                        'hostname': [i['hostname'] for i in LISTA],
                        'macaddres': [i['macaddres'] for i in LISTA],
                        'oui': [oui_detection(i['macaddres']) if i['macaddres'] is not False else i['macaddres'] for i in LISTA],
                        'status': ['ONLINE' for i in LISTA]
                }
	return TABLE

def main():
	RED = '%s'
	MASK = '%s'
	SCAN_MODE = %s

	MASK = mask_parsec(RED, MASK)
	IP_LIST = client_list(RED, MASK)

	if SCAN_MODE == 0:
		net_scan(IP_LIST, ICMP=True, HOSTNAME=False, TCP=False)
	if SCAN_MODE == 1:
		net_scan(IP_LIST, ICMP=True, HOSTNAME=True, TCP=False)
	if SCAN_MODE == 2:
		net_scan(IP_LIST, ICMP=False, HOSTNAME=True, TCP=True)

	#print(IP_INFO_LIST)
	print(create_table(IP_INFO_LIST, SCAN_MODE))

if __name__ == '__main__':
	main()
	" "$1" "$2" "$3"
}

function net_scan(){
	python_scan "$IP" "$NETWORK_MASK" "$SCAN_MODE" | python3
}

if [ $(id -u) -eq 0 ]; then
	declare -A ARRAY=([-h]="-h" [--help]="--help" [--h]="--h" [-help]="-help")
	for i in "${ARRAY[@]}"; do
		if [ $1 ]; then env test ${ARRAY[$1]+_} 2>/dev/null && help_panel; fi
	done

	declare -i INDEX=1
	declare -A ARGUMENTS=(); declare -A VARIABLES=()

	VARIABLES["--system"]="SYSTEM_USER"
	VARIABLES["--sys"]="SYSTEM_USER"
	VARIABLES["--install"]="INSTALL"
	VARIABLES["--mode"]="SCAN_MODE"
	VARIABLES["--ip"]="IP"
	VARIABLES["--mask"]="NETWORK_MASK"

	VARIABLES["-n"]="networkCard"
	VARIABLES["-m"]="SCAN_MODE"
	VARIABLES["-i"]="IP"

	for i in "$@"; do
		ARGUMENTS[$INDEX]=$i;
		PREV_INDEX="$(expr $INDEX - 1)";

		if [[ $i == *"="* ]]; then ARGUMENT_LABEL=${i%=*}
    		else ARGUMENT_LABEL=${ARGUMENTS[$PREV_INDEX]}; fi

  		if [[ -n $ARGUMENT_LABEL ]]; then
    			if [[ -n ${VARIABLES[$ARGUMENT_LABEL]} ]]; then
      				if [[ $i == *"="* ]]; then
					declare ${VARIABLES[$ARGUMENT_LABEL]}=${i#$ARGUMENT_LABEL=}
        			else
					declare ${VARIABLES[$ARGUMENT_LABEL]}=${ARGUMENTS[$INDEX]}
      				fi
    			fi
  		fi

  		INDEX=INDEX+1;
	done; defauld_value

	if [ "${HELP_PANEL,,}" == "true" ]; then help_panel; fi

	if [ "${INSTALL,,}" == "true" ]; then dependencies; fi
	net_scan
fi; ctrl_c
